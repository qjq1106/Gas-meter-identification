{"version":3,"file":"download-excel.js","sources":["components/download-excel/download-excel.vue","../../../../微信开发者工具/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RTovdGVzdFByb2plY3RzL1dlQ2hhdFByb2plY3RzL3Rlc3RQcm9qZWN0LTIv54eD5rCU5ZCO5Y-w566h55CG6Z2i5p2_L2NvbXBvbmVudHMvZG93bmxvYWQtZXhjZWwvZG93bmxvYWQtZXhjZWwudnVl"],"sourcesContent":["<template>\r\n  <div :id=\"idName\" @click=\"generate\">\r\n    <slot> Download {{ name }} </slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport download from \"./download\";\r\n\r\nexport default {\r\n  name: \"downloadExcel\",\r\n  props: {\r\n    // mime type [xls, csv]\r\n    type: {\r\n      type: String,\r\n      default: \"xls\",\r\n    },\r\n    // Json to download\r\n    data: {\r\n      type: Array,\r\n      required: false,\r\n      default: null,\r\n    },\r\n    // fields inside the Json Object that you want to export\r\n    // if no given, all the properties in the Json are exported\r\n    fields: {\r\n      type: Object,\r\n      default: () => null,\r\n    },\r\n    // this prop is used to fix the problem with other components that use the\r\n    // variable fields, like vee-validate. exportFields works exactly like fields\r\n    exportFields: {\r\n      type: Object,\r\n      default: () => null,\r\n    },\r\n    // Use as fallback when the row has no field values\r\n    defaultValue: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\",\r\n    },\r\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\r\n    header: {\r\n      default: null,\r\n    },\r\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\r\n    footer: {\r\n      default: null,\r\n    },\r\n    // filename to export\r\n    name: {\r\n      type: String,\r\n      default: \"data.xls\",\r\n    },\r\n    fetch: {\r\n      type: Function,\r\n    },\r\n    meta: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    worksheet: {\r\n      type: String,\r\n      default: \"Sheet1\",\r\n    },\r\n    //event before generate was called\r\n    beforeGenerate: {\r\n      type: Function,\r\n    },\r\n    //event before download pops up\r\n    beforeFinish: {\r\n      type: Function,\r\n    },\r\n    // Determine if CSV Data should be escaped\r\n    escapeCsv: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    // long number stringify\r\n    stringifyLongNum: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  computed: {\r\n    // unique identifier\r\n    idName() {\r\n      let now = new Date().getTime();\r\n      return \"export_\" + now;\r\n    },\r\n\r\n    downloadFields() {\r\n      if (this.fields) return this.fields;\r\n\r\n      if (this.exportFields) return this.exportFields;\r\n    },\r\n  },\r\n  methods: {\r\n    async generate() {\r\n      if (typeof this.beforeGenerate === \"function\") {\r\n        await this.beforeGenerate();\r\n      }\r\n      let data = this.data;\r\n      if (typeof this.fetch === \"function\" || !data) data = await this.fetch();\r\n\r\n      if (!data || !data.length) {\r\n        return;\r\n      }\r\n\r\n      let json = this.getProcessedJson(data, this.downloadFields);\r\n      if (this.type === \"html\") {\r\n        // this is mainly for testing\r\n        return this.export(\r\n          this.jsonToXLS(json),\r\n          this.name.replace(\".xls\", \".html\"),\r\n          \"text/html\"\r\n        );\r\n      } else if (this.type === \"csv\") {\r\n        return this.export(\r\n          this.jsonToCSV(json),\r\n          this.name.replace(\".xls\", \".csv\"),\r\n          \"application/csv\"\r\n        );\r\n      }\r\n      return this.export(\r\n        this.jsonToXLS(json),\r\n        this.name,\r\n        \"application/vnd.ms-excel\"\r\n      );\r\n    },\r\n    /*\r\n\t\tUse downloadjs to generate the download link\r\n\t\t*/\r\n    export: async function (data, filename, mime) {\r\n      let blob = this.base64ToBlob(data, mime);\r\n      if (typeof this.beforeFinish === \"function\") await this.beforeFinish();\r\n      download(blob, filename, mime);\r\n    },\r\n    /*\r\n\t\tjsonToXLS\r\n\t\t---------------\r\n\t\tTransform json data into an xml document with MS Excel format, sadly\r\n\t\tit shows a prompt when it opens, that is a default behavior for\r\n\t\tMicrosoft office and cannot be avoided. It's recommended to use CSV format instead.\r\n\t\t*/\r\n    jsonToXLS(data) {\r\n      let xlsTemp =\r\n        '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\r\n      let xlsData = \"<thead>\";\r\n      const colspan = Object.keys(data[0]).length;\r\n      let _self = this;\r\n\r\n      //Header\r\n      const header = this.header || this.$attrs.title;\r\n      if (header) {\r\n        xlsData += this.parseExtraData(\r\n          header,\r\n          '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\r\n        );\r\n      }\r\n\r\n      //Fields\r\n      xlsData += \"<tr>\";\r\n      for (let key in data[0]) {\r\n        xlsData += \"<th>\" + key + \"</th>\";\r\n      }\r\n      xlsData += \"</tr>\";\r\n      xlsData += \"</thead>\";\r\n\r\n      //Data\r\n      xlsData += \"<tbody>\";\r\n      data.map(function (item, index) {\r\n        xlsData += \"<tr>\";\r\n        for (let key in item) {\r\n          xlsData +=\r\n            \"<td>\" +\r\n            _self.preprocessLongNum(\r\n              _self.valueReformattedForMultilines(item[key])\r\n            ) +\r\n            \"</td>\";\r\n        }\r\n        xlsData += \"</tr>\";\r\n      });\r\n      xlsData += \"</tbody>\";\r\n\r\n      //Footer\r\n      if (this.footer != null) {\r\n        xlsData += \"<tfoot>\";\r\n        xlsData += this.parseExtraData(\r\n          this.footer,\r\n          '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\r\n        );\r\n        xlsData += \"</tfoot>\";\r\n      }\r\n\r\n      return xlsTemp\r\n        .replace(\"${table}\", xlsData)\r\n        .replace(\"${worksheet}\", this.worksheet);\r\n    },\r\n    /*\r\n\t\tjsonToCSV\r\n\t\t---------------\r\n\t\tTransform json data into an CSV file.\r\n\t\t*/\r\n    jsonToCSV(data) {\r\n      let _self = this;\r\n\t\t\tlet csvData = [];\r\n\r\n      //Header\r\n      const header = this.header || this.$attrs.title;\r\n      if (header) {\r\n        csvData.push(this.parseExtraData(header, \"${data}\\r\\n\"));\r\n      }\r\n\r\n      //Fields\r\n      for (let key in data[0]) {\r\n        csvData.push(key);\r\n        csvData.push(\",\");\r\n      }\r\n      csvData.pop();\r\n      csvData.push(\"\\r\\n\");\r\n      //Data\r\n      data.map(function (item) {\r\n        for (let key in item) {\r\n          let escapedCSV = item[key] + \"\";\r\n          // Escaped CSV data to string to avoid problems with numbers or other types of values\r\n          // this is controlled by the prop escapeCsv\r\n          if (_self.escapeCsv) {\r\n            escapedCSV = '=\"' + escapedCSV + '\"'; // cast Numbers to string\r\n            if (escapedCSV.match(/[,\"\\n]/)) {\r\n              escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\r\n            }\r\n          }\r\n          csvData.push(escapedCSV);\r\n          csvData.push(\",\");\r\n        }\r\n        csvData.pop();\r\n        csvData.push(\"\\r\\n\");\r\n      });\r\n      //Footer\r\n      if (this.footer != null) {\r\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\r\n      }\r\n      return csvData.join(\"\");\r\n    },\r\n    /*\r\n\t\tgetProcessedJson\r\n\t\t---------------\r\n\t\tGet only the data to export, if no fields are set return all the data\r\n\t\t*/\r\n    getProcessedJson(data, header) {\r\n      let keys = this.getKeys(data, header);\r\n      let newData = [];\r\n      let _self = this;\r\n      data.map(function (item, index) {\r\n        let newItem = {};\r\n        for (let label in keys) {\r\n          let property = keys[label];\r\n          newItem[label] = _self.getValue(property, item);\r\n        }\r\n        newData.push(newItem);\r\n      });\r\n\r\n      return newData;\r\n    },\r\n    getKeys(data, header) {\r\n      if (header) {\r\n        return header;\r\n      }\r\n\r\n      let keys = {};\r\n      for (let key in data[0]) {\r\n        keys[key] = key;\r\n      }\r\n      return keys;\r\n    },\r\n    /*\r\n\t\tparseExtraData\r\n\t\t---------------\r\n\t\tParse title and footer attribute to the csv format\r\n\t\t*/\r\n    parseExtraData(extraData, format) {\r\n      let parseData = \"\";\r\n      if (Array.isArray(extraData)) {\r\n        for (let i = 0; i < extraData.length; i++) {\r\n          if (extraData[i])\r\n            parseData += format.replace(\"${data}\", extraData[i]);\r\n        }\r\n      } else {\r\n        parseData += format.replace(\"${data}\", extraData);\r\n      }\r\n      return parseData;\r\n    },\r\n\r\n    getValue(key, item) {\r\n      const field = typeof key !== \"object\" ? key : key.field;\r\n      let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\r\n      let value = this.defaultValue;\r\n\r\n      if (!field) value = item;\r\n      else if (indexes.length > 1)\r\n        value = this.getValueFromNestedItem(item, indexes);\r\n      else value = this.parseValue(item[field]);\r\n\r\n      if (key.hasOwnProperty(\"callback\"))\r\n        value = this.getValueFromCallback(value, key.callback);\r\n\r\n      return value;\r\n    },\r\n\r\n    /*\r\n    convert values with newline \\n characters into <br/>\r\n    */\r\n    valueReformattedForMultilines(value) {\r\n      if (typeof value == \"string\") return value.replace(/\\n/gi, \"<br/>\");\r\n      else return value;\r\n    },\r\n    preprocessLongNum(value) {\r\n      if (this.stringifyLongNum) {\r\n        if (String(value).startsWith(\"0x\")) {\r\n          return value;\r\n        }\r\n        if (!isNaN(value) && value != \"\") {\r\n          if (value > 99999999999 || value < 0.0000000000001) {\r\n            return '=\"' + value + '\"';\r\n          }\r\n        }\r\n      }\r\n      return value;\r\n    },\r\n    getValueFromNestedItem(item, indexes) {\r\n      let nestedItem = item;\r\n      for (let index of indexes) {\r\n        if (nestedItem) nestedItem = nestedItem[index];\r\n      }\r\n      return this.parseValue(nestedItem);\r\n    },\r\n\r\n    getValueFromCallback(item, callback) {\r\n      if (typeof callback !== \"function\") return this.defaultValue;\r\n      const value = callback(item);\r\n      return this.parseValue(value);\r\n    },\r\n    parseValue(value) {\r\n      return value || value === 0 || typeof value === \"boolean\"\r\n        ? value\r\n        : this.defaultValue;\r\n    },\r\n    base64ToBlob(data, mime) {\r\n      let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\r\n      let bstr = atob(base64);\r\n      let n = bstr.length;\r\n      let u8arr = new Uint8ClampedArray(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      return new Blob([u8arr], { type: mime });\r\n    },\r\n  }, // end methods\r\n};\r\n</script>\r\n","import Component from 'E:/testProjects/WeChatProjects/testProject-2/燃气后台管理面板/components/download-excel/download-excel.vue'\nwx.createComponent(Component)"],"names":["download"],"mappings":"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"}